// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {Script} from "forge-std/Script.sol";
import {VerifierProveRSA65537SHA256} from "../../../../src/verifiers/prove/Verifier_prove_rsa_65537_sha256.sol";

contract TestVerifierRegisterSha256RSA65537 is Test, Script {
    VerifierProveRSA65537SHA256 public verifier;

    /*//////////////////////////////////////////////////////////////
                                 SETUP
    //////////////////////////////////////////////////////////////*/
    function setUp() public {
        verifier = new VerifierProveRSA65537SHA256();
    }

    /*//////////////////////////////////////////////////////////////
                              Verify Proof
    //////////////////////////////////////////////////////////////*/
    function testShouldReturnFalseWhenInvalidProof() public view {
        uint256[2] memory a;
        uint256[2][2] memory b;
        uint256[2] memory c;
        uint256[45] memory pubSignals;

        bool isVerified = verifier.verifyProof(a, b, c, pubSignals);

        assertEq(isVerified, false);
    }

    function testShouldReturnTrueWhenValidProof() public view {
        uint256[2] memory a = [
            uint256(0x01b78f980b8152fe9cd995ec2a8eae33ac2917d9d726ede095a7e6b65b644556),
            uint256(0x1862a51302535bf2a1276688483e6a136816ac192ca864a4b7f6597ce6a34f3f)
        ];
        uint256[2][2] memory b = [
            [
                uint256(0x19fb8b0a5f7219b0ff67346f295dd3c2fd920ed3f5d8236c4afb3335ef30aeaf),
                uint256(0x0366809df7b10b9da74bdd45817f46c7224c510d9bf7445f06ac933a6f9b84d9)
            ],
            [
                uint256(0x0a456c23cc546dff592a3cf495a63ed30e3b4bcee867b73b325ad324e12f1f7d),
                uint256(0x2b966e64d1e60f9a286bbf894730fac55dcf406c0a310c17e7adf896ed90fb5d)
            ]
        ];
        uint256[2] memory c = [
            uint256(0x0af4668a831fc08c2ec65ef262be1b14b14e2391185c718ede19744743db98c3),
            uint256(0x230b621b8105f5aef21ddaa9d25065e61de68acb8a7130d17f602234d6a590d1)
        ];
        uint256[45] memory pubSignals = [
            uint256(0x0000000000000000000000000000000000000000000000000000000000000001),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000038310000000000000000000000000000000000000000000000000000),
            uint256(0x2ced155025b295d20bb504520d5d9d6072a11ed3c7637768a194ac06e9e21766),
            uint256(0x00000000000000000000000000000000000000000000000053411f824698fa2f),
            uint256(0x000000000000000000000000000000000000000000000000ff1d688bd8e828cb),
            uint256(0x000000000000000000000000000000000000000000000000bd8326134c5a6786),
            uint256(0x0000000000000000000000000000000000000000000000000afe5ec7730a32f4),
            uint256(0x0000000000000000000000000000000000000000000000002a0e6a5ec80d4fce),
            uint256(0x000000000000000000000000000000000000000000000000f2fe65e24f796c82),
            uint256(0x000000000000000000000000000000000000000000000000f003e5f6e0fb76f5),
            uint256(0x000000000000000000000000000000000000000000000000f7f0b8b4f7d16ba1),
            uint256(0x000000000000000000000000000000000000000000000000c0a50b9f9a009b2c),
            uint256(0x000000000000000000000000000000000000000000000000aa4b7930bc60289b),
            uint256(0x000000000000000000000000000000000000000000000000ee44f0d84ddcfd28),
            uint256(0x0000000000000000000000000000000000000000000000003d192c791c3d8393),
            uint256(0x000000000000000000000000000000000000000000000000940fdda1df29a07a),
            uint256(0x000000000000000000000000000000000000000000000000b2cb8508124d8a7c),
            uint256(0x000000000000000000000000000000000000000000000000e11251c45d7bbb8e),
            uint256(0x00000000000000000000000000000000000000000000000071257465ea50c505),
            uint256(0x0000000000000000000000000000000000000000000000001ad23eb19cfa74b5),
            uint256(0x000000000000000000000000000000000000000000000000085050985a12e3b6),
            uint256(0x000000000000000000000000000000000000000000000000cd67cb092d9e8b18),
            uint256(0x0000000000000000000000000000000000000000000000006453346761251ae4),
            uint256(0x00000000000000000000000000000000000000000000000076cceeb03dd248fa),
            uint256(0x000000000000000000000000000000000000000000000000832d5907c2ad2ce9),
            uint256(0x000000000000000000000000000000000000000000000000a277cc8ca629bee5),
            uint256(0x00000000000000000000000000000000000000000000000049ac2c66b33ce9d6),
            uint256(0x000000000000000000000000000000000000000000000000ed637fc977dbb3cd),
            uint256(0x000000000000000000000000000000000000000000000000c9fd54e162a1ca3f),
            uint256(0x0000000000000000000000000000000000000000000000003a4330c1fec63b6b),
            uint256(0x000000000000000000000000000000000000000000000000ad24b71325166d44),
            uint256(0x0000000000000000000000000000000000000000000000006dfc0e830acc6b6f),
            uint256(0x00000000000000000000000000000000000000000000000004f4b44e0821e867),
            uint256(0x000000000000000000000000000000000000000000000000a7161769a43e3175),
            uint256(0x000000000000000000000000000000000000000000000000db99fbc3b7a9901c),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000418),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000001),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000)
        ];

        bool isVerified = verifier.verifyProof(a, b, c, pubSignals);

        assertEq(isVerified, true);
    }
}
