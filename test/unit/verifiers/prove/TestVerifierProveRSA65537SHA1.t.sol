// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {Script} from "forge-std/Script.sol";
import {VerifierProveRSA65537SHA1} from "../../../../src/verifiers/prove/Verifier_prove_rsa_65537_sha1.sol";

contract TestVerifierRegisterSha256RSAPSS65537 is Test, Script {
    VerifierProveRSA65537SHA1 public verifier;

    /*//////////////////////////////////////////////////////////////
                                 SETUP
    //////////////////////////////////////////////////////////////*/
    function setUp() public {
        verifier = new VerifierProveRSA65537SHA1();
    }

    /*//////////////////////////////////////////////////////////////
                              Verify Proof
    //////////////////////////////////////////////////////////////*/
    function testShouldReturnFalseWhenInvalidProof() public view {
        uint256[2] memory a;
        uint256[2][2] memory b;
        uint256[2] memory c;
        uint256[45] memory pubSignals;

        bool isVerified = verifier.verifyProof(a, b, c, pubSignals);

        assertEq(isVerified, false);
    }

    function testShouldReturnTrueWhenValidProof() public view {
        uint256[2] memory a = [
            uint256(0x12b6e38fcd518118c5cadf3c97689e2e67425490df01dbfb79a5f020a8994796),
            uint256(0x2ea837699b46845c0ffbbaf6658021208ede473c1442d1cc9b6bac47fa6ca0e7)
        ];
        uint256[2][2] memory b = [
            [
                uint256(0x2d0cf26aa51eb2e3e88547664dcf0b8a880eaf06d4c59200bfc57238bd250128),
                uint256(0x1dce29f6576dc018002f7edfc6d4f98123709ca4da118871dc4fe413e7e367b5)
            ],
            [
                uint256(0x284bf168e018cc9f1dfdb9db4fa9e922f93fa61ab94e58cf2c87c0f925b1ee07),
                uint256(0x01d7697d819a5340ab8a0b9cd92a3a48ab549e84c1e54464c77e3e93ae19ede7)
            ]
        ];
        uint256[2] memory c = [
            uint256(0x2720185ef00ceaecefe86025a462c73d22cd6504997a9b5f45ca4306de69bd4a),
            uint256(0x09524eeb5ed6cf3a935d7b91ab53892aa022cfbe78e057646d5a5e1e4c82ba42)
        ];
        uint256[45] memory pubSignals = [
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000038310000000000000000000000000000000000000000000000000000),
            uint256(0x12a5ee265d9b4ac6990f5116299dffb04c76b5afbedc85d9f0f5032942596e38),
            uint256(0x0000000000000000000000000000000000000000000000004a42acd329876dc3),
            uint256(0x0000000000000000000000000000000000000000000000008a0c30f2e8aef697),
            uint256(0x0000000000000000000000000000000000000000000000007b6165f92860301e),
            uint256(0x000000000000000000000000000000000000000000000000479934def26b69b6),
            uint256(0x000000000000000000000000000000000000000000000000bc54c0eb61a2e77b),
            uint256(0x000000000000000000000000000000000000000000000000cc5a5391770db266),
            uint256(0x000000000000000000000000000000000000000000000000dc6192745bb0da12),
            uint256(0x00000000000000000000000000000000000000000000000082a7fad0268fc98c),
            uint256(0x000000000000000000000000000000000000000000000000bca5851380f4f0ec),
            uint256(0x000000000000000000000000000000000000000000000000c6de00864055128b),
            uint256(0x00000000000000000000000000000000000000000000000003e9e516ae41f5ad),
            uint256(0x000000000000000000000000000000000000000000000000f29efd222eb1251e),
            uint256(0x0000000000000000000000000000000000000000000000009f0edd33e35f68d2),
            uint256(0x0000000000000000000000000000000000000000000000005e4c5a0ae5e07606),
            uint256(0x000000000000000000000000000000000000000000000000e59f242de9fc6d4b),
            uint256(0x000000000000000000000000000000000000000000000000010e743255401f25),
            uint256(0x0000000000000000000000000000000000000000000000001c1e907b7a0526d9),
            uint256(0x00000000000000000000000000000000000000000000000026b4d2f93b8d7400),
            uint256(0x000000000000000000000000000000000000000000000000309dc1c691b869ea),
            uint256(0x00000000000000000000000000000000000000000000000064ac68b6ae86ca59),
            uint256(0x000000000000000000000000000000000000000000000000248f2beddf4689c1),
            uint256(0x000000000000000000000000000000000000000000000000160f21275532f287),
            uint256(0x000000000000000000000000000000000000000000000000771ec9057be8e47b),
            uint256(0x00000000000000000000000000000000000000000000000043915dd0028addd1),
            uint256(0x0000000000000000000000000000000000000000000000002dd771374ee5d86e),
            uint256(0x0000000000000000000000000000000000000000000000005e2a5817e19e50ed),
            uint256(0x000000000000000000000000000000000000000000000000c25f285d4ceef999),
            uint256(0x000000000000000000000000000000000000000000000000234229c7008ccf51),
            uint256(0x000000000000000000000000000000000000000000000000e0dd64eb3c89f343),
            uint256(0x000000000000000000000000000000000000000000000000e953c6158a1aa7fd),
            uint256(0x0000000000000000000000000000000000000000000000009fed398611efc871),
            uint256(0x000000000000000000000000000000000000000000000000b215658e3dcd3d73),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000418),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000001),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000)
        ];

        bool isVerified = verifier.verifyProof(a, b, c, pubSignals);

        assertEq(isVerified, true);
    }
}
